//setting up webdriver
-------------------------
System.setProperty("webdriver.chrome.driver", "C:\\Users\\kppra\\Downloads\\chromedriver_win32 (1).exe");
                OR
WebDriverManager.ChromeDriver().setup();
WebDriver driver = new ChromeDriver();

ChromeDriver class is implementing all the methods available in WebDriver interface
we are creating an instance of the WebDriver interface and casting it to ChromeDriver 
Class. All the browser drivers like FirefoxDriver, ChromeDriver, InternetExplorerDriver, 
 SafariDriver etc can implement the WebDriver interface
	
ChromeDriver driver = new ChromeDriver();
here chrome driver class implements the methods of chromedriver interface
The ChromeDriver instance will be only able to invoke and act on the methods implemented 
by ChromeDriver and supported by google-chrome only.

//driver.manage().window().maximize(); to maximize window size
//driver.manage().window().minimize(); to minimize window size
	

//To handle multiple windows
---------------------------------
driver.getWindowHandles()-handle all the opened windows
driver.getWindowHandle()- handle the main window/current window

Set<String> windowsID =driver.getWindowHandles();
Iterator<String>itr = WindowsID.iterator(); 
{
	while(itr.hasnext){
	sysout(itr.next);
}


//To handle window size
------------------------
driver.manage().window().maximize();


//Take Screenshot
---------------------
TakesScreenshot screenshot = (TakesScreenshot) driver;
File sourceFile = screenshot.getScreenshotAs(OutputType.FILE);
String dstPath = System.getProperty("user.dir")+"\\src\\test\\java\\screenshots\\";
File dstFile = new File(dstPath);
FileUtils.copyFile(sourceFile,dstFile);
return dstPath;

//upload file/images - using sendkeys or robot class method
-------------
WebDriverManager.ChromeDriver().setup();
WebDriver driver = new ChromeDriver();
driver.get(URL);

WebElement element = driver.findElement(By.name("uploadfile"));
element.click();
uploadFile("path to the file");

//double click action
---------------------------
Actions action = new Actions(driver);
WebElement elementLocator = driver.findElement(By.id("ID"));
action.doubleClick(elementLocator).perform();


//mousehover
-------------
Actions action = new Actions(driver);
action.moveToElement(usrmnu).build().perform();

//code to read properties file
------------------------------
String PropFilePath = "C:\\Users\\user\\eclipse-workspace\\FileHandling\\src\\main\\java\\com\\files\\sample.properties";
		FileReader fr = new FileReader(PropFilePath);
		Properties p = new Properties();
		p.load(fr);
		System.out.println(p.getProperty("name"));


//write javascript executor to send the text to textbox
----------------------------------------------------------
//JSExecutor = It is an interface used to execute javascript through selenium webdriver
	
	//JavascriptExecutor js = (JavascriptExecutor)driver; //since js implements webdriver we have to typecast jse
	js.executescript("arguments[0].value='sowmya.prasi@gmail.com';",button);
	
	//alert=
	//js.executeScript("alert('Welcome to JAVA');");
	
	//click=
	//js.executeScript("arguments[0].click();",button(webelt));
	
	//scrollBy = 
	//js.executeScript(window.scrollBy(0,700);");
	
	//manipulate attributes 

	//title
	
	//sendkeys = js.executescript("arguments[0].value='sowmya.prasi@gmail.com';",button);
	
	//iframes = driver.switchTo().frame(driver.findElement(By.xpath("//iframe[@id='']")));
	 
	
//Robot class= to perform keyboard and mouse actions
------------------------------------------------------
	//Robot r = new Robot();
	//r.keyPress(KeyEvent.VK_ENTER);
	//r.keyRelease(KeyEvent.VK_Enter);
	
	//Drag and Drop - actions class
	--------------------------------
	//Actions action = new Actions(driver);
	//action.clickAndHold(target elet).moveToElement(drop).release().build().perform();
	

//code for data provider method
---------------------------------
@DataProvider(name="data")
	public String[][] getdata(String excelSheetName) throws InvalidFormatException, IOException {
		
		
		File f = new File(System.getProperty("user.dir")+"\\src\\test\\resources\\testdata\\usrnmepwd.xlsx");
		FileInputStream fis = new FileInputStream(f);
		Workbook wb= WorkbookFactory.create(fis);
		Sheet sheetName = wb.getSheet(excelSheetName);


//Implicit wait
----------------
Selenium WebDriver waits for a certain measure of time before throwing an exception.Once 
this time is set, WebDriver will wait for the element before the exception occurs.
IT Waits for page to load. Once it is declared in the pgm, no need to repeat again. 

driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS); 


//explicit wait
---------------
waits for elt to load, waits for slow loading elts or ajax elts.declare in the beginning 
of the pgm, later access it by using the obj

WebDriverWait wait= new WebDriverWait(driver,30); //
wait.until(ExpectedConditions.visibilityOf(driver.findElement(By.xpath(null)))); 

//QUERY TO SELECT EMPLOYEES STARTING WITH LETTER H 
//SELECT * FROM department WHERE NAME LIKE 'H%';

//fluent wait
---------------
Fluent Wait looks for a web element repeatedly at regular intervals until timeout happens
or until the object is found.

//setup android/ ios driver
---------------------------
AndroidDriver<MobileElement>driver = new AndroidDriver<MobileElement>(url,dc);

//code for webtable
--------------------
//locate table elets using its ID
//create x-path for tble elt till tr and get the count, ||y for column , td and get the count of the same,
//once we get the count, have to apply the loop with i rows and j columns

List<WebElement rows = WebDriver.findelemnts(by.xpath("..../tbody/tr"));
List<WebElement cols = WebDriver.findelemnts(by.xpath("..../tbody/tr/td"));
for(int i=1;i<rows.size();i++)
{
	for(int j=1;j<cols.size();j++)
	{
	`.......
	}
}
//keyword driven framework
------------------------------
//The keyword-driven framework is based on keywords that form the basis of the functionality, 
//take in parameters, and throw the relevant output

//Data driven framework
-------------------------
A Data Driven Framework in Selenium is a technique of separating the “data set” from the 
actual “test case” (code).

//modular driven 
------------------
creation of small, independent scripts that represents modules, sections and functions
 of the application under test. 
 
 //hybrid f/w
 ------------------
 Hybrid Driven Framework in Selenium is a mix of both the Data-Driven and Keyword Driven 
 frameworks
 
 
//to list all the elts on google search-- go to div js controller='P10owf' inside that div class = 'OBMEnb'-ul
//ul[@class = '']//li


//MOBILE AUTOMATION
SWIPE
-----
//swipe/scroll
//	Dimension size=driver.findElement(By.id("")).getSize();
//	int x=size.getWidth()/2;
//	int y=size.getHeight()/2;

	WaitOptions wo =new WaitOptions();
//	wo.withDuration(Duration.ofSeconds(1));

METHOD
TouchAction action = new TouchAction(driver);
//		action.press(PointOption.point(520, 1970)).waitAction().moveTo(PointOption.point(520,305)).release().perform();

DRAG AND DROP
-------------
TouchAction finger1 = new TouchAction(driver);
//	//finger1.press(PointOption.point(520, 1970)).waitAction().moveTo(PointOption.point(520,305)).release().perform();
//	//drag and drop
//	finger1.press(PointOption.point(530,532)).waitAction(wo).moveTo(PointOption.point(34, 45)).release();
//	
//	TouchAction finger2 = new TouchAction(driver);
//	finger2.press(PointOption.point(520, 2053)).waitAction(wo).moveTo(PointOption.point(520,305)).release();

//ZOOM
------
